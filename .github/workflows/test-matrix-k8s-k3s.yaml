name: k8s+k3s-version-test-matrix
on:
  pull_request:
    branches:
      - "*"
  push:
    branches:
      - develop
  workflow_dispatch:

jobs:
  k3s-version-test:
    name: k3s-test-${{ matrix.k8s_version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        k8s_version:
          [
            v1.23.17+k3s1,
            v1.24.17+k3s1,
            v1.25.16+k3s4,
            v1.26.15+k3s1,
            v1.27.16+k3s1,
            v1.28.14+k3s1,
            v1.29.15+k3s1,
            v1.30.11+k3s1,
            v1.31.7+k3s1,
            v1.32.3+k3s1,
          ]

    steps:
      - uses: actions/checkout@v4
      - uses: alexellis/setup-arkade@v2

      - uses: alexellis/arkade-get@master
        with:
          kubectl: latest
          helm: latest
          k3d: latest

      - name: Setup k3s ${{ matrix.k8s_version }}
        shell: bash
        run: |
          echo "Ensure UFW is disabled"
          sudo ufw disable
          echo "Setup k3s ${{ matrix.k8s_version }}"
          curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION="${{ matrix.k8s_version }}" INSTALL_K3S_CHANNEL="stable" sh -s -

      - name: Prepare a kubeconfig in ~/.kube/config
        shell: bash
        run: |
          echo "Prepare a kubeconfig in ~/.kube/config"
          mkdir -p ~/.kube
          sudo cat /etc/rancher/k3s/k3s.yaml > "$HOME/.kube/config"
          chmod 600 "$HOME/.kube/config"
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV

      - name: Wait for cluster to be ready
        shell: bash
        run: |
          sleep 60s
          echo "Waiting for nodes to be ready..."
          kubectl wait --for=condition=Ready nodes --all --timeout=4m
          kubectl get nodes -o wide
          echo "Wait for deployment/coredns"
          kubectl rollout status --watch --timeout=4m deployment/coredns -n kube-system
          echo "Wait for deployment/metrics-server"
          kubectl rollout status --watch --timeout=4m deployment/metrics-server -n kube-system

      - name: Set version output
        id: set-output
        shell: bash
        run: |
          echo "kubeconfig=$HOME/.kube/config" >> $GITHUB_OUTPUT
          echo "k3s-version=$(k3s --version | grep --max-count=1 'k3s' | sed 's/.*\(v[0-9][^ ]*\).*/\1/')" >> $GITHUB_OUTPUT
          echo "k8s-version=$(k3s --version | grep --max-count=1 'k3s' | sed 's/.*\(v[0-9][^+]*\).*/\1/')" >> $GITHUB_OUTPUT
          echo "helm-version=$(helm version --short | sed 's/\([^+]*\).*/\1/')" >> $GITHUB_OUTPUT

      - name: Install CZ Agent
        run: |
          echo "Applying CloudZero Agent Helm Chart"
          helm repo add prom https://prometheus-community.github.io/helm-charts
          helm dependency build ./helm
          export CLUSTERNAME="$(hostname)-$(date '+%Y%m%d%H%M%S')"
          echo $CLUSTERNAME
          make \
            CLOUDZERO_DEV_API_KEY="${{ secrets.CLOUDZERO_DEV_API_KEY }}" \
            CLUSTER_NAME="${CLUSTERNAME}" \
            helm-install
          sleep 60s
          kubectl get pods -n cz-agent
          timeout 240s kubectl events -n cz-agent -w
          kubectl wait pod \
            --timeout 240s \
            --all \
            --for=condition=Ready \
            --namespace=cz-agent

      - uses: kubeshop/setup-testkube@v1
        with:
          namespace: testkube
          version: 2.1.137

      - run: |
          kubectl wait pod \
            --timeout 240s \
            --all \
            --for=condition=Ready \
            --namespace=testkube
          testkube run testworkflow agent-basic-test -f

      - name: Cleanup
        if: always()
        run: |
          k3d cluster rm k3d-${{ matrix.k8s_version }} || true
